/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { FailureLayout } from '@ohos/uicomponents';
import { LoadingStatus, ObservedArray } from '@ohos/utils';
import { LearningResource } from '../model/LearningResource';
import { UserModel } from '../model/UserModel';
import { LoadingView } from './LoadingView';
import { NoneContentView } from './NoneContentView';
import { ResourceListView } from './ResourceListView';

@Component
export struct ViewedResourceView {
  @State userModel: UserModel = UserModel.getInstance();
  @State @Watch('onContentChange') userViewedResources: ObservedArray<LearningResource> = this.userModel.userViewedResources;
  @State viewCounts: number = this.userViewedResources.length;
  @State loadingViewedStatus: LoadingStatus = LoadingStatus.OFF;
  innerScroller?: Scroller;
  outerScroller?: Scroller;

  aboutToAppear() {
    this.loadViewedData();
  }

  loadViewedData() {
    this.loadingViewedStatus = LoadingStatus.LOADING;
    this.userModel.getViewedResources().then(() => {
      this.loadingViewedStatus = LoadingStatus.SUCCESS;
    }).catch(() => {
      this.loadingViewedStatus = LoadingStatus.FAILED;
    });
  }

  onContentChange(): void {
    this.viewCounts = this.userViewedResources.length;
  }

  build() {
    if (this.loadingViewedStatus === LoadingStatus.LOADING) {
      LoadingView()
    } else if (this.loadingViewedStatus === LoadingStatus.FAILED) {
      FailureLayout({ handleReload: () => {
        this.loadViewedData();
      } })
    } else if (this.viewCounts === 0) {
      NoneContentView()
    } else {
      ResourceListView({
        contents: this.userViewedResources,
        scrollerForScroll: this.outerScroller,
        scrollerForList: this.innerScroller
      })
    }
  }
}